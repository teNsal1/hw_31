from django.db.models.signals import m2m_changed
from django.dispatch import receiver
from core.models import Order
from core.telegram import send_telegram_message
import logging

logger = logging.getLogger(__name__)

@receiver(m2m_changed, sender=Order.services.through)
def notify_about_new_order(sender, instance, action, **kwargs):
    if action == 'post_add':
        try:
            message = (
                f"üéâ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
                f"üîπ *–ö–ª–∏–µ–Ω—Ç:* {instance.client_name}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {instance.phone}\n"
                f"üßî *–ú–∞—Å—Ç–µ—Ä:* {instance.master.name if instance.master else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ *–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:* {instance.appointment_date}\n"
                f"üîß *–£—Å–ª—É–≥–∏:* {', '.join(s.name for s in instance.services.all())}"
            )
            if not send_telegram_message(message):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏–≥–Ω–∞–ª–µ: {e}")